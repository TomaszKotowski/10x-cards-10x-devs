/**
 * Interface for a generated flashcard from AI
 */
export interface GeneratedCard {
  question: string;
  answer: string;
}

/**
 * Result of AI card generation
 */
export interface AIGenerationResult {
  cards: GeneratedCard[];
  rawResponse: any;
  model: string;
}

/**
 * Service for generating flashcards
 * Currently using mock data for development (to save API costs)
 * TODO: Replace with actual OpenRouter API integration in production
 */
export class AIService {
  private static readonly MODEL = "openai/gpt-4o-mini";
  private static readonly TIMEOUT_MS = 30000; // 30 seconds
  private static readonly API_URL = "https://openrouter.ai/api/v1/chat/completions";

  /**
   * System prompt for AI flashcard generation
   */
  private static readonly SYSTEM_PROMPT = `You are a flashcard generator. Generate educational flashcards based on the provided text.
Return a JSON object with a "cards" array. Each card must have "question" and "answer" fields.
Generate 3-10 cards depending on the content length.
Questions should be clear and concise. Answers should be informative but brief.
Focus on key concepts, definitions, and important facts.`;

  /**
   * Generates flashcards from the provided prompt
   * Currently returns mock data for development
   *
   * @param prompt - Text content to generate flashcards from
   * @returns AIGenerationResult with generated cards and metadata
   * @throws Error if generation fails
   */
  static async generateCards(prompt: string): Promise<AIGenerationResult> {
    // Simulate API delay
    await new Promise((resolve) => setTimeout(resolve, 500));

    // Generate mock cards based on prompt length
    const wordCount = prompt.split(/\s+/).length;
    const cardCount = Math.min(10, Math.max(3, Math.floor(wordCount / 20)));

    const cards: GeneratedCard[] = [];

    for (let i = 1; i <= cardCount; i++) {
      cards.push({
        question: `What is the key concept #${i} from the provided text?`,
        answer: `This is a mock answer for concept #${i}. In production, this would be generated by AI based on the actual content: "${prompt.substring(0, 50)}..."`,
      });
    }

    // Mock response structure similar to OpenRouter
    const mockResponse = {
      id: `mock-${Date.now()}`,
      model: this.MODEL,
      choices: [
        {
          message: {
            role: "assistant",
            content: JSON.stringify({ cards }),
          },
        },
      ],
      usage: {
        prompt_tokens: 0,
        completion_tokens: 0,
        total_tokens: 0,
      },
    };

    // eslint-disable-next-line no-console
    console.log("[MOCK] Generated", cards.length, "flashcards");

    return {
      cards,
      rawResponse: mockResponse,
      model: this.MODEL,
    };
  }
}
